name: W3C SCXML Compliance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      log-level:
        description: 'Log level for test execution'
        required: false
        default: 'error'
        type: choice
        options:
          - trace
          - debug
          - info
          - warn
          - error
          - off
      specific-tests:
        description: 'Specific test numbers (comma-separated, e.g., 531,518,519) or empty for all'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: W3C SCXML Test Suite
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          g++ \
          meson \
          ninja-build \
          pkg-config \
          libxml2-dev \
          libspdlog-dev \
          libfmt-dev \
          libboost-dev

    - name: Setup Problem Matchers
      run: |
        echo "::add-matcher::.github/problem-matchers/gcc.json"
        echo "::add-matcher::.github/problem-matchers/cmake.json"

    - name: Cache CMake Build
      uses: actions/cache@v4
      with:
        path: |
          build/CMakeCache.txt
          build/CMakeFiles
          build/_deps
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_CXX_COMPILER=g++ \
          -G Ninja

    - name: Build
      run: cmake --build build --parallel $(nproc)

    - name: Verify Resources
      run: |
        if [ ! -d "resources" ]; then
          echo "Error: resources directory not found"
          exit 1
        fi
        txml_count=$(find resources -name '*.txml' | wc -l)
        test_dirs=$(find resources -mindepth 1 -maxdepth 1 -type d | wc -l)
        echo "Resources directory found:"
        echo "  - Test directories: $test_dirs"
        echo "  - TXML files: $txml_count"

    - name: Debug Environment
      run: |
        echo "=== Current Directory ==="
        pwd
        echo "=== Resources Check ==="
        ls -la ../../resources | head -n 20
        echo "=== Build Directory ==="
        ls -la build/tests
        echo "=== Library Check ==="
        ldd build/tests/w3c_test_cli | grep libxml

    - name: Run W3C SCXML Test Suite
      run: |
        cd build/tests
        ulimit -c unlimited
        
        # Determine log level (workflow_dispatch input or default 'debug')
        LOG_LEVEL="${{ inputs.log-level || 'debug' }}"
        
        # Determine test arguments
        if [ -n "${{ inputs.specific-tests }}" ]; then
          # Convert comma-separated list to space-separated
          TEST_ARGS=$(echo "${{ inputs.specific-tests }}" | tr ',' ' ')
          echo "Running specific tests: $TEST_ARGS"
          env SPDLOG_LEVEL=$LOG_LEVEL ./w3c_test_cli $TEST_ARGS --output w3c_test_results.xml 2>&1 | tail -n 100
        else
          echo "Running all tests"
          env SPDLOG_LEVEL=$LOG_LEVEL ./w3c_test_cli --output w3c_test_results.xml 2>&1 | tail -n 100
        fi
      continue-on-error: true

    - name: Analyze Crash (if occurred)
      if: always()
      run: |
        cd build/tests
        if [ -f core ]; then
          echo "=== Core dump found! ==="
          gdb -batch -ex "bt" -ex "quit" ./w3c_test_cli core 2>&1 || echo "GDB not available"
        else
          echo "No core dump found"
        fi

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: always()
      with:
        report_paths: 'build/tests/w3c_test_results.xml'
        detailed_summary: true
        include_passed: true
        fail_on_failure: false
        check_name: 'W3C SCXML Test Results'
        summary: '📊 [View Detailed HTML Report](https://newmassrael.github.io/reactive-state-machine/test-results.html)'
        group_suite: true
        annotate_only: false

    - name: Upload Test Results Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: w3c-test-results
        path: build/tests/w3c_test_results.xml
        retention-days: 30

    - name: Generate HTML Report
      if: always()
      run: |
        python3 .github/scripts/generate-html-report.py \
          build/tests/w3c_test_results.xml \
          build/tests/test-results.html
        
        # Create a clean directory with only HTML files for GitHub Pages
        mkdir -p gh-pages
        cp build/tests/test-results.html gh-pages/
        cp build/tests/w3c_test_results.xml gh-pages/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: always() && github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./gh-pages
        destination_dir: .
        keep_files: false
        force_orphan: true

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          build/CMakeFiles/*.log
          build/Testing/Temporary/
        retention-days: 7

    - name: Generate Test Summary
      if: always()
      run: |
        cd build/tests
        echo "## 📊 W3C SCXML Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Detailed HTML Report](https://newmassrael.github.io/reactive-state-machine/test-results.html)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f w3c_test_results.xml ]; then
          total=$(grep -oP 'tests="\K[0-9]+' w3c_test_results.xml | head -1)
          failures=$(grep -oP 'failures="\K[0-9]+' w3c_test_results.xml | head -1)
          errors=$(grep -oP 'errors="\K[0-9]+' w3c_test_results.xml | head -1)
          passed=$((total - failures - errors))
          pass_rate=$(awk "BEGIN {printf \"%.1f\", ($passed / $total) * 100}")

          # Count tests by engine type (using classname)
          dynamic_total=$(grep -oP 'classname="W3C_Dynamic"' w3c_test_results.xml | wc -l)
          hybrid_total=$(grep -oP 'classname="W3C_Hybrid"' w3c_test_results.xml | wc -l)

          # Count passed tests by engine type (no failure tags)
          dynamic_passed=$(grep 'classname="W3C_Dynamic"' w3c_test_results.xml | grep -v '<failure' | wc -l)
          hybrid_passed=$(grep 'classname="W3C_Hybrid"' w3c_test_results.xml | grep -v '<failure' | wc -l)

          dynamic_failed=$((dynamic_total - dynamic_passed))
          hybrid_failed=$((hybrid_total - hybrid_passed))

          # Display engine-specific statistics
          echo "| Engine | Total | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dynamic | $dynamic_total | $dynamic_passed | $dynamic_failed |" >> $GITHUB_STEP_SUMMARY
          if [ $hybrid_total -gt 0 ]; then
            echo "| Hybrid | $hybrid_total | $hybrid_passed | $hybrid_failed |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| **Total** | **$total** | **$passed** | **$((failures + errors))** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **📈 Pass Rate:** ${pass_rate}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if (( $(echo "$pass_rate >= 80.0" | bc -l) )); then
            echo "🏆 **Status:** EXCELLENT - High W3C SCXML compliance!" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$pass_rate >= 60.0" | bc -l) )); then
            echo "👍 **Status:** GOOD - Reasonable W3C SCXML compliance" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Status:** NEEDS IMPROVEMENT - Review failing tests" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ Test results file not found" >> $GITHUB_STEP_SUMMARY
        fi
