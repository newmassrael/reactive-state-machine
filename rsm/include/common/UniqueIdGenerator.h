#pragma once

#include <atomic>
#include <chrono>
#include <mutex>
#include <random>
#include <string>
#include <unordered_set>

namespace RSM {

/**
 * @brief Centralized unique ID generation utility
 *
 * This class consolidates all ID generation logic across the codebase to ensure:
 * - Consistent ID formats
 * - No ID collisions between different components
 * - Single point of maintenance for ID generation logic
 * - Thread-safe operations
 *
 * Replaces duplicate ID generation methods in:
 * - SCXMLEngineImpl, StateMachine, JSEngine (session IDs)
 * - EventSchedulerImpl, ActionExecutorImpl (send IDs)
 * - InvokeExecutor, SCXMLInvokeHandler (invoke IDs)
 * - HttpEventBridge, HttpEventReceiver (event IDs)
 * - ConcurrentEventBroadcaster (correlation IDs)
 * - BaseAction (action IDs)
 */
class UniqueIdGenerator {
public:
    /**
     * @brief Generate unique session ID
     * @param prefix Optional prefix for the session ID
     * @return Unique session ID in format: prefix_timestamp_counter
     */
    static std::string generateSessionId(const std::string &prefix = "session");

    /**
     * @brief Generate unique send ID for event scheduling
     * @return Unique send ID in format: send_timestamp_counter
     */
    static std::string generateSendId();

    /**
     * @brief Generate unique invoke ID for SCXML invoke operations
     * @param stateId Parent state ID for W3C SCXML 6.4 compliance (test 224)
     * @return Unique invoke ID in format: stateid.platformid (W3C) or invoke_timestamp_counter (legacy)
     */
    static std::string generateInvokeId(const std::string &stateId = "");

    /**
     * @brief Generate unique event ID for HTTP event processing
     * @return Unique event ID in format: event_timestamp_counter
     */
    static std::string generateEventId();

    /**
     * @brief Generate unique correlation ID for concurrent operations
     * @return Unique correlation ID in format: corr_timestamp_counter
     */
    static std::string generateCorrelationId();

    /**
     * @brief Generate unique action ID for SCXML actions
     * @param prefix Optional prefix for the action ID
     * @return Unique action ID in format: prefix_timestamp_counter
     */
    static std::string generateActionId(const std::string &prefix = "action");

    /**
     * @brief Generate generic unique ID with custom prefix
     * @param prefix Prefix for the generated ID
     * @return Unique ID in format: prefix_timestamp_counter
     */
    static std::string generateUniqueId(const std::string &prefix);

    /**
     * @brief Generate numeric session ID for legacy JSEngine compatibility
     * @return Unique numeric session ID
     */
    static uint64_t generateNumericSessionId();

    /**
     * @brief Check if an ID was generated by this generator
     * @param id ID to check
     * @return true if ID matches the generator's format
     */
    static bool isGeneratedId(const std::string &id);

    /**
     * @brief Reset internal counters (for testing purposes only)
     * WARNING: This should only be called in test environments
     */
    static void resetForTesting();

    /**
     * @brief Get statistics about ID generation
     * @return Statistics string with generation counts
     */
    static std::string getStatistics();

private:
    // Thread-safe counter for uniqueness within the same millisecond
    static std::atomic<uint64_t> globalCounter_;

    // Random number generator for additional uniqueness
    static std::mt19937_64 rng_;
    static std::mutex rngMutex_;

    // Statistics tracking
    static std::atomic<uint64_t> sessionIdCount_;
    static std::atomic<uint64_t> sendIdCount_;
    static std::atomic<uint64_t> invokeIdCount_;
    static std::atomic<uint64_t> eventIdCount_;
    static std::atomic<uint64_t> correlationIdCount_;
    static std::atomic<uint64_t> actionIdCount_;
    static std::atomic<uint64_t> genericIdCount_;

    /**
     * @brief Internal method to generate base unique ID
     * @param prefix Prefix for the ID
     * @param counterRef Reference to the specific counter for this ID type
     * @return Unique ID string
     */
    static std::string generateBaseId(const std::string &prefix, std::atomic<uint64_t> &counterRef);

    /**
     * @brief Get current timestamp in milliseconds
     * @return Timestamp as uint64_t
     */
    static uint64_t getCurrentTimestamp();

    /**
     * @brief Get random component for additional uniqueness
     * @return Random number component
     */
    static uint64_t getRandomComponent();
};

}  // namespace RSM