#pragma once

#include "common/StringUtils.h"
#include <string>

namespace RSM {

/**
 * @brief Helper functions for W3C SCXML 5.10.1 event type classification
 *
 * Single Source of Truth for event type detection shared between:
 * - Interpreter engine (EventRaiserImpl, ActionExecutorImpl)
 * - AOT engine (StaticCodeGenerator)
 *
 * W3C SCXML 5.10.1: Event type must be "internal", "platform", or "external"
 *
 * ARCHITECTURE.md: Zero Duplication Principle - All AOT engine logic MUST
 * reuse interpreter engine implementations through shared helper functions.
 */
class EventTypeHelper {
public:
    /**
     * @brief Classify event type according to W3C SCXML 5.10.1
     *
     * Single Source of Truth for event type classification logic.
     *
     * W3C SCXML 5.10.1 Classification:
     * - "platform": Events generated by the platform (error.*, done.*)
     * - "external": Events from <send> (external event queue)
     * - "internal": Events from <raise> (internal event queue)
     *
     * @param eventName Event name to classify
     * @param isExternal True if event was sent via external queue (<send>)
     * @return Event type string: "internal", "platform", or "external"
     */
    inline static std::string classifyEventType(const std::string &eventName, bool isExternal) {
        // W3C SCXML 5.10.1: Platform events (error.*, done.*) have highest priority
        if (isPlatformEvent(eventName)) {
            return "platform";
        }

        // W3C SCXML 5.10.1: External events from <send>
        if (isExternal) {
            return "external";
        }

        // W3C SCXML 5.10.1: Default to internal (from <raise>)
        return "internal";
    }
};

}  // namespace RSM
