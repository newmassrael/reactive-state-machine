{
{% if action.id %}
std::string sendId = "{{ action.id }}";
{% else %}
std::string sendId = ::RSM::SendHelper::generateSendId();
{% endif %}
{% if model.needs_jsengine or model.needs_event_origin %}
// W3C SCXML 5.10.1: Ensure sessionId for origin tracking
if (!sessionId_.has_value()) {
    sessionId_ = "session_" + std::to_string(reinterpret_cast<uintptr_t>(this));
}
{% endif %}
{% if action.idlocation %}
// W3C SCXML 6.2.4: Store sendid in idlocation (test183, test332)
{% if model.needs_jsengine or model.needs_event_origin %}
this->ensureJSEngine();
auto& jsEngine = ::RSM::JSEngine::instance();
::RSM::SendHelper::storeInIdLocation(jsEngine, sessionId_.value(), "{{ action.idlocation }}", sendId);
{% else %}
{{ action.idlocation }} = sendId;
{% endif %}
{% endif %}

{% set has_targetexpr = True %}
{% if action.targetexpr %}
// W3C SCXML 6.2: Dynamic target evaluation (test173)
std::string dynamicTarget;
{% if model.needs_jsengine or model.needs_event_origin %}
this->ensureJSEngine();
auto& jsEngine = ::RSM::JSEngine::instance();
auto targetResult = jsEngine.evaluateExpression(sessionId_.value(), "{{ action.targetexpr | escape_cpp }}").get();
if (!::RSM::JSEngine::isSuccess(targetResult)) {
    LOG_ERROR("Failed to evaluate targetexpr: {{ action.targetexpr }}");
    engine.raise(typename Engine::EventWithMetadata(Event::Error_execution));
}
dynamicTarget = ::RSM::JSEngine::resultToString(targetResult);
{% else %}
{% if action.targetexpr == '_event.origin' %}
dynamicTarget = pendingEventOrigin_;
{% else %}
dynamicTarget = {{ action.targetexpr }};
{% endif %}
{% endif %}
if (::RSM::SendHelper::isInvalidTarget(dynamicTarget)) {
{% if model.needs_jsengine or model.needs_event_origin %}
    pendingEventSendId_ = sendId;
{% endif %}
    engine.raise(typename Engine::EventWithMetadata(Event::Error_execution, "", "", sendId));
}
{% elif action.target %}
{% if action.target == '#_parent' %}
// W3C SCXML 6.2: Send to parent state machine with invokeid (test338)
::RSM::SendHelper::sendToParent(parent_, ParentStateMachine::Event::{{ action.event | capitalize }}, invokeId_);
{% elif action.target == '#_child' %}
// W3C SCXML 6.4.1: Send to invoked child state machine (test347)
{% if model.static_invokes %}
{% set invoke_id = model.static_invokes[0].invoke_id %}
{% set child_name = model.static_invokes[0].child_name %}
if (child_{{ invoke_id }}_) {
    // W3C SCXML 6.4.1: Send event to child using child's Event enum
    using ChildEvent = ::RSM::Generated::{{ child_name }}::Event;
    LOG_DEBUG("Sending event {{ action.event }} to child {{ invoke_id }}");
    child_{{ invoke_id }}_->raiseExternal(ChildEvent::{{ action.event | capitalize }});
    LOG_DEBUG("Processing child {{ invoke_id }} event queues");
    // W3C SCXML 6.4: Process child's event queues immediately (synchronous communication)
    child_{{ invoke_id }}_->step();
    LOG_DEBUG("Child {{ invoke_id }} processing complete, isInFinalState={}", child_{{ invoke_id }}_->isInFinalState());
} else {
    LOG_WARN("Child {{ invoke_id }} not initialized, cannot send event");
}
{% else %}
// No static invokes found - this should not happen for #_child target
LOG_ERROR("Cannot send to #_child: no static invokes in model");
{% endif %}
{% else %}
// W3C SCXML 6.2 (tests 159, 194): Validate send target using SendHelper
if (::RSM::SendHelper::isInvalidTarget("{{ action.target }}")) {
{% if model.needs_jsengine or model.needs_event_origin %}
    // W3C SCXML 5.10.1: Store sendid for error.execution event (test332)
    pendingEventSendId_ = sendId;
{% endif %}
    // W3C SCXML 5.10: Invalid target raises error.execution and stops subsequent executable content
    engine.raise(typename Engine::EventWithMetadata(Event::Error_execution, "", "", sendId));
{% if in_entry_exit is defined and in_entry_exit %}
    return;  // Stop execution of subsequent actions in this entry/exit/transition
{% endif %}
}
{% endif %}
{% else %}
// W3C SCXML 6.2.4: No target attribute â†’ external queue (to self)
{% endif %}

{% if action.target != '#_parent' and action.target != '#_child' %}
{% if action.eventexpr %}
// W3C SCXML 6.2: Dynamic event evaluation (test172)
{
{% if model.needs_jsengine or model.needs_event_origin %}
    this->ensureJSEngine();
    auto& jsEngine = ::RSM::JSEngine::instance();
    auto eventResult = jsEngine.getVariable(sessionId_.value(), "{{ action.eventexpr }}").get();
    if (!::RSM::JSEngine::isSuccess(eventResult)) {
        LOG_ERROR("Failed to get variable for eventexpr: {{ action.eventexpr }}");
        engine.raise(typename Engine::EventWithMetadata(Event::Error_execution));
    } else {
    std::string eventName = ::RSM::JSEngine::resultToString(eventResult);
{% else %}
    std::string eventName = {{ action.eventexpr }};
{% endif %}
    // Map event name to enum
    {% for event_name in model.events | sort %}
    {% if loop.first %}
    if (eventName == "{{ event_name }}") {
        engine.raise(typename Engine::EventWithMetadata(Event::{{ event_name | replace('.', '_') | capitalize }}));
    {% else %}
    } else if (eventName == "{{ event_name }}") {
        engine.raise(typename Engine::EventWithMetadata(Event::{{ event_name | replace('.', '_') | capitalize }}));
    {% endif %}
    {% endfor %}
    }
{% if model.needs_jsengine or model.needs_event_origin %}
    }
{% endif %}
}
{% elif action.event %}
{% if action.delay or action.delayexpr %}
// W3C SCXML 6.2: Delayed send with event scheduling
{
{% if action.namelist or action.params %}
    // W3C SCXML 5.10: Build event data from namelist and params (test354)
    std::map<std::string, std::vector<std::string>> params;
{% if action.namelist %}
    // W3C SCXML C.1: Evaluate namelist variables using NamelistHelper (Zero Duplication)
{% if model.needs_jsengine or model.needs_event_origin %}
    {
        this->ensureJSEngine();
        auto& jsEngine = ::RSM::JSEngine::instance();
        bool success = ::RSM::NamelistHelper::evaluateNamelist(
            jsEngine, sessionId_.value(), "{{ action.namelist }}",
            params,
            [&engine](const std::string& msg) {
                LOG_ERROR("Namelist evaluation failed: {}", msg);
                engine.raise(typename Engine::EventWithMetadata(Event::Error_execution));
            }
        );
        if (!success) return;
    }
{% endif %}
{% endif %}
{% if action.params %}
    // W3C SCXML 5.10: Evaluate params at send time (test186, test354)
{% for param in action.params %}
{% if model.needs_jsengine or model.needs_event_origin %}
    {
        this->ensureJSEngine();
        auto& jsEngine = ::RSM::JSEngine::instance();
        auto paramResult = jsEngine.evaluateExpression(sessionId_.value(), "{{ param.expr }}").get();
        if (::RSM::JSEngine::isSuccess(paramResult)) {
            params["{{ param.name }}"].push_back(::RSM::JSEngine::resultToString(paramResult));
        } else {
            LOG_ERROR("Failed to evaluate param expr: {{ param.expr }}");
            params["{{ param.name }}"].push_back("");
        }
    }
{% else %}
    params["{{ param.name }}"].push_back(std::to_string({{ param.expr }}));
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% if action.delayexpr %}
    std::string delayStr;
{% if model.needs_jsengine or model.needs_event_origin %}
    this->ensureJSEngine();
    auto& jsEngine = ::RSM::JSEngine::instance();
    auto delayResult = jsEngine.getVariable(sessionId_.value(), "{{ action.delayexpr }}").get();
    if (::RSM::JSEngine::isSuccess(delayResult)) {
        delayStr = ::RSM::JSEngine::resultToString(delayResult);
    }
{% else %}
    delayStr = {{ action.delayexpr }};
{% endif %}
    auto delayMs = ::RSM::SendSchedulingHelper::parseDelayString(delayStr);
{% else %}
    auto delayMs = ::RSM::SendSchedulingHelper::parseDelayString("{{ action.delay }}");
{% endif %}
{% if action.params %}
    std::string eventData = ::RSM::EventDataHelper::buildJsonFromParams(params);
    eventScheduler_.scheduleEvent(Event::{{ action.event | capitalize }}, delayMs, sendId, eventData);
{% else %}
    eventScheduler_.scheduleEvent(Event::{{ action.event | capitalize }}, delayMs, sendId);
{% endif %}
}
{% else %}
// W3C SCXML 6.2: Immediate send
{% if action.namelist or action.params %}
// W3C SCXML 5.10: Build event data from namelist and params (test354)
std::map<std::string, std::vector<std::string>> params;
{% if action.namelist %}
// W3C SCXML C.1: Evaluate namelist variables using NamelistHelper (Zero Duplication)
{% if model.needs_jsengine or model.needs_event_origin %}
{
    this->ensureJSEngine();
    auto& jsEngine = ::RSM::JSEngine::instance();
    bool success = ::RSM::NamelistHelper::evaluateNamelist(
        jsEngine, sessionId_.value(), "{{ action.namelist }}",
        params,
        [&engine](const std::string& msg) {
            LOG_ERROR("Namelist evaluation failed: {}", msg);
            engine.raise(typename Engine::EventWithMetadata(Event::Error_execution));
        }
    );
    if (!success) return;
}
{% endif %}
{% endif %}
{% if action.params %}
// W3C SCXML 5.10: Evaluate params at send time (test186, test354)
{% for param in action.params %}
{% if model.needs_jsengine or model.needs_event_origin %}
{
    this->ensureJSEngine();
    auto& jsEngine = ::RSM::JSEngine::instance();
    auto paramResult = jsEngine.evaluateExpression(sessionId_.value(), "{{ param.expr }}").get();
    if (::RSM::JSEngine::isSuccess(paramResult)) {
        params["{{ param.name }}"].push_back(::RSM::JSEngine::resultToString(paramResult));
    } else {
        LOG_ERROR("Failed to evaluate param expr: {{ param.expr }}");
        params["{{ param.name }}"].push_back("");
    }
}
{% else %}
params["{{ param.name }}"].push_back(std::to_string({{ param.expr }}));
{% endif %}
{% endfor %}
{% endif %}
std::string eventData = ::RSM::EventDataHelper::buildJsonFromParams(params);
{% if action.send_type == 'http://www.w3.org/TR/scxml/#SCXMLEventProcessor' %}
{% if action.targetexpr %}
if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
}
{% else %}
if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
}
{% endif %}
{% else %}
{% if action.targetexpr %}
if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
}
{% else %}
if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
}
{% endif %}
{% endif %}
{% elif action.content %}
// W3C SCXML 5.10: Set event data from <content>
{% if action.send_type == 'http://www.w3.org/TR/scxml/#SCXMLEventProcessor' %}
{% if action.targetexpr %}
if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}"));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}", sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}");
{% endif %}
}
{% else %}
if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}"));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}", sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}");
{% endif %}
}
{% endif %}
{% else %}
{% if action.targetexpr %}
if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}"));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}", sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}");
{% endif %}
}
{% else %}
if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}"));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}", sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }}, "{{ action.content | escape_cpp }}");
{% endif %}
}
{% endif %}
{% endif %}
{% elif action.contentexpr %}
// W3C SCXML 5.10: Evaluate content expression
{
    this->ensureJSEngine();
    auto& jsEngine = ::RSM::JSEngine::instance();
    auto contentResult = jsEngine.evaluateExpression(sessionId_.value(), "{{ action.contentexpr | escape_cpp }}").get();
    std::string eventData;
    if (::RSM::JSEngine::isSuccess(contentResult)) {
        eventData = ::RSM::JSEngine::resultToString(contentResult);
    } else {
        LOG_ERROR("Failed to evaluate content expr: {{ action.contentexpr }}");
        engine.raise(typename Engine::EventWithMetadata(Event::Error_execution));
        eventData = "";
    }
{% if action.send_type == 'http://www.w3.org/TR/scxml/#SCXMLEventProcessor' %}
{% if action.targetexpr %}
    if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
        engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
    } else {
{% if model.needs_jsengine or model.needs_event_origin %}
        engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
        engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
    }
{% else %}
    if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
        engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
    } else {
{% if model.needs_jsengine or model.needs_event_origin %}
        engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
        engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
    }
{% endif %}
{% else %}
{% if action.targetexpr %}
    if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
        engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
    } else {
{% if model.needs_jsengine or model.needs_event_origin %}
        engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
        engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
    }
{% else %}
    if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
        engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData));
    } else {
{% if model.needs_jsengine or model.needs_event_origin %}
        engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, eventData, sessionId_.value_or(""), sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
        engine.raiseExternal(Event::{{ action.event | capitalize }}, eventData);
{% endif %}
    }
{% endif %}
{% endif %}
}
{% else %}
// W3C SCXML 6.2: Send without data
{% if action.send_type == 'http://www.w3.org/TR/scxml/#SCXMLEventProcessor' %}
{% if action.targetexpr %}
if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "", sessionId_.has_value() ? sessionId_.value() : "", sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }});
{% endif %}
}
{% else %}
if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "", sessionId_.has_value() ? sessionId_.value() : "", sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }});
{% endif %}
}
{% endif %}
{% else %}
{% if action.targetexpr %}
if (::RSM::SendHelper::isInternalTarget(dynamicTarget)) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "", sessionId_.has_value() ? sessionId_.value() : "", sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }});
{% endif %}
}
{% else %}
if (::RSM::SendHelper::isInternalTarget("{{ action.target }}")) {
    engine.raise(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}));
} else {
{% if model.needs_jsengine or model.needs_event_origin %}
    engine.raiseExternal(typename Engine::EventWithMetadata(Event::{{ action.event | capitalize }}, "", sessionId_.has_value() ? sessionId_.value() : "", sendId, "", "{% if action.send_type %}{{ action.send_type }}{% else %}http://www.w3.org/TR/scxml/#SCXMLEventProcessor{% endif %}"));
{% else %}
    engine.raiseExternal(Event::{{ action.event | capitalize }});
{% endif %}
}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
}
